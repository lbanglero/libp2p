import { CID } from 'multiformats/cid';
import type { Limit } from './pb/index.js';
import type { ConnectionLimits, LoggerOptions, Stream } from '@libp2p/interface';
import type { Uint8ArrayList } from 'uint8arraylist';
export declare function createLimitedRelay(src: Stream, dst: Stream, abortSignal: AbortSignal, limit: Limit | undefined, options: LoggerOptions): void;
/**
 * Convert a namespace string into a cid
 */
export declare function namespaceToCid(namespace: string): Promise<CID>;
/**
 * returns number of ms between now and expiration time
 */
export declare function getExpirationMilliseconds(expireTimeSeconds: bigint): number;
export declare class LimitTracker {
    private readonly expires?;
    private bytes?;
    constructor(limits?: Limit);
    onData(buf: Uint8ArrayList | Uint8Array): void;
    getLimits(): ConnectionLimits | undefined;
}
//# sourceMappingURL=utils.d.ts.map